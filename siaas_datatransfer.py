import siaas_aux
import logging
import os
import sys
import pprint
import time
from datetime import datetime
from copy import copy

logger = logging.getLogger(__name__)


def create_or_update_agent_configs(db_collection=None, agent_uid=None, config_dict={}):

    if db_collection == None:
        logger.error(
            "No valid DB collection object received. No data was uploaded.")
        return False

    if agent_uid == None:
        logger.error(
            "No valid agent UID received. No data was uploaded.")
        return False

    if type(config_dict) is not dict:
        logger.error(
            "No valid dict received. No data was uploaded.")
        return False

    siaas_uid = siaas_aux.get_or_create_unique_system_id()

    # Creating a new dict with a date object and date transfer direction so we can easily filter it and order entries in MongoDB

    # MongoDB fields in SIAAS data model are:
    # _id - (Auto-generated by Mongo)
    # scope - What type of content there's in this entry
    # origin - Creator of this entry
    # destiny - Intended destiny
    # payload - Data payload
    # timestamp - Data object with creation timestamp of the record

    complete_dict = {}
    complete_dict["scope"] = "agent_configs"
    complete_dict["origin"] = "server_"+siaas_uid
    complete_dict["destiny"] = "agent_"+agent_uid
    complete_dict["payload"] = dict(config_dict)
    complete_dict["timestamp"] = siaas_aux.get_now_utc_obj()

    ret_db = siaas_aux.create_or_update_in_mongodb_collection(db_collection, complete_dict)
    if ret_db:
        return False

    return True


def loop():

    db_collection = None
    last_uploaded_dict = {}
    last_downloaded_dict = {}

    # Some default values for some well known variables that can't be changed during runtime (these will be overwritten if there's a config file key for them)
    MONGO_USER = "siaas"
    MONGO_PWD = "siaas"
    MONGO_HOST = "127.0.0.1"
    MONGO_PORT = "27017"
    MONGO_DB = "siaas"
    MONGO_COLLECTION = "siaas"

    # Generate global variables from the configuration file
    config_dict = siaas_aux.get_config_from_configs_db()
    for config_name in config_dict.keys():
        if config_name.upper() == "MONGO_USER":
            MONGO_USER = config_dict[config_name]
        if config_name.upper() == "MONGO_PWD":
            MONGO_PWD = config_dict[config_name]
        if config_name.upper() == "MONGO_HOST":
            MONGO_HOST = config_dict[config_name]
        if config_name.upper() == "MONGO_PORT":
            MONGO_PORT = config_dict[config_name]
        if config_name.upper() == "MONGO_DB":
            MONGO_DB = config_dict[config_name]
        if config_name.upper() == "MONGO_COLLECTION":
            MONGO_COLLECTION = config_dict[config_name]

    while True:

        logger.debug("Loop running ...")

        if db_collection == None:
            # Create connection to MongoDB if it doesn't exist
            if len(MONGO_PORT or '') > 0:
                mongo_host_port = MONGO_HOST+":"+MONGO_PORT
            else:
                mongo_host_port = MONGO_HOST
            db_collection = siaas_aux.connect_mongodb_collection(
                MONGO_USER, MONGO_PWD, mongo_host_port, MONGO_DB, MONGO_COLLECTION)

        if db_collection != None:
            # Upload server data
            #last_uploaded_dict = upload_server_data(db_collection, last_uploaded_dict)
            # Download server data
            #download_server_data(db_collection, scope="agent-configs")

            # Sleep before next loop
            try:
                sleep_time = int(siaas_aux.get_config_from_configs_db(
                    "data_transfer_loop_interval_sec"))
                logger.debug("Sleeping for "+str(sleep_time) +
                             " seconds before next loop ...")
                time.sleep(sleep_time)
            except:
                logger.debug(
                    "The interval loop time is not configured or is invalid. Sleeping now for 60 seconds by default ...")
                time.sleep(60)


if __name__ == "__main__":

    log_level = logging.INFO
    logging.basicConfig(
        format='%(asctime)s %(levelname)-5s %(filename)s [%(threadName)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S', level=log_level)

    if os.geteuid() != 0:
        print("You need to be root to run this script!", file=sys.stderr)
        sys.exit(1)

    print('\nThis script is being directly run, so it will just read data from the DB!\n')

    MONGO_USER = "siaas"
    MONGO_PWD = "siaas"
    MONGO_HOST = "127.0.0.1"
    MONGO_PORT = "27017"
    MONGO_DB = "siaas"
    MONGO_COLLECTION = "siaas"

    config = {
        "datatransfer_loop_interval_sec": 45,
        "disable_portscanner": "false",
        "manual_hosts": "google.com",
        "silent_mode": "false"
    }

    config_2 = {
        "datatransfer_loop_interval_sec": 30,
        "disable_portscanner": "false",
        "silent_mode": "false"
    }


    bc_config = {
        "datatransfer_loop_interval_sec": 120,
        "disable_portscanner": "true",
        "ignore_neighbourhood": "",
        "silent_mode": "true",
        "testing_a_dict": { "oi": 123 }
    }

    #config = {}
    #config_2 = {}
    #bc_config = {}

    agent_uid = "0924aa8b-6dc9-4fec-9716-d1601fc8b6c6"
    agent_uid_2 = "L1HF89B0091"

    # Create some configs for the agents (testing)

    collection = siaas_aux.connect_mongodb_collection(
        MONGO_USER, MONGO_PWD, MONGO_HOST+":"+MONGO_PORT, MONGO_DB, MONGO_COLLECTION)

    create_or_update_agent_configs(collection, agent_uid, config)
    create_or_update_agent_configs(collection, agent_uid_2, config_2)
    create_or_update_agent_configs(
        collection, "ffffffff-ffff-ffff-ffff-ffffffffffff", bc_config)

    siaas_uid = siaas_aux.get_or_create_unique_system_id()
    #siaas_uid = "00000000-0000-0000-0000-000000000000" # hack to show data from all servers

    results = siaas_aux.read_mongodb_collection(collection, siaas_uid)

    results = siaas_aux.get_dict_current_agent_data(collection, agent_uid=agent_uid+","+agent_uid_2, module="neighborhood")
    #results = siaas_aux.get_dict_current_agent_data(collection)
    #results = siaas_aux.get_dict_active_agents(collection)


    results = siaas_aux.get_dict_current_agent_configs(collection, agent_uid=agent_uid, include_broadcast=False)
    #results = siaas_aux.get_dict_current_agent_configs(collection, include_broadcast=True)

    results = siaas_aux.get_dict_historical_agent_data(collection)

    if results != None:
        pprint.pprint(results)
        #for doc in results:
            # print('\n'+str(pprint.pformat(doc)))
            #print('\n'+str(doc))

    print('\nAll done. Bye!\n')

